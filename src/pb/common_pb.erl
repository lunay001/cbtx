%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.10.5
-module(common_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_LOGINMSG/1, enum_value_by_symbol_LOGINMSG/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("common_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'LOGINMSG'() :: 'FAILED' | 'SUCCEEDED' | 'NOTFOUND'.
-export_type(['LOGINMSG'/0]).

%% message types
-type loginReq() :: #loginReq{}.

-type loginResp() :: #loginResp{}.

-type helloReq() :: #helloReq{}.

-type worldResp() :: #worldResp{}.

-type heartbeatReq() :: #heartbeatReq{}.

-type heartbeatResp() :: #heartbeatResp{}.

-export_type(['loginReq'/0, 'loginResp'/0, 'helloReq'/0, 'worldResp'/0, 'heartbeatReq'/0, 'heartbeatResp'/0]).

-spec encode_msg(#loginReq{} | #loginResp{} | #helloReq{} | #worldResp{} | #heartbeatReq{} | #heartbeatResp{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#loginReq{} | #loginResp{} | #helloReq{} | #worldResp{} | #heartbeatReq{} | #heartbeatResp{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#loginReq{} | #loginResp{} | #helloReq{} | #worldResp{} | #heartbeatReq{} | #heartbeatResp{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      loginReq ->
	  encode_msg_loginReq(id(Msg, TrUserData), TrUserData);
      loginResp ->
	  encode_msg_loginResp(id(Msg, TrUserData), TrUserData);
      helloReq ->
	  encode_msg_helloReq(id(Msg, TrUserData), TrUserData);
      worldResp ->
	  encode_msg_worldResp(id(Msg, TrUserData), TrUserData);
      heartbeatReq ->
	  encode_msg_heartbeatReq(id(Msg, TrUserData),
				  TrUserData);
      heartbeatResp ->
	  encode_msg_heartbeatResp(id(Msg, TrUserData),
				   TrUserData)
    end.


encode_msg_loginReq(Msg, TrUserData) ->
    encode_msg_loginReq(Msg, <<>>, TrUserData).


encode_msg_loginReq(#loginReq{cookie = F1}, Bin,
		    TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_loginResp(Msg, TrUserData) ->
    encode_msg_loginResp(Msg, <<>>, TrUserData).


encode_msg_loginResp(#loginResp{result = F1,
				user_id = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'FAILED'; TrF1 =:= 0 -> Bin;
		     true ->
			 e_enum_LOGINMSG(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_helloReq(Msg, TrUserData) ->
    encode_msg_helloReq(Msg, <<>>, TrUserData).


encode_msg_helloReq(#helloReq{msg = F1}, Bin,
		    TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_worldResp(Msg, TrUserData) ->
    encode_msg_worldResp(Msg, <<>>, TrUserData).


encode_msg_worldResp(#worldResp{msg = F1}, Bin,
		     TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_heartbeatReq(_Msg, _TrUserData) -> <<>>.

encode_msg_heartbeatResp(Msg, TrUserData) ->
    encode_msg_heartbeatResp(Msg, <<>>, TrUserData).


encode_msg_heartbeatResp(#heartbeatResp{unixtime = F1},
			 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

e_enum_LOGINMSG('FAILED', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_LOGINMSG('SUCCEEDED', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_LOGINMSG('NOTFOUND', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_LOGINMSG(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(loginReq, Bin, TrUserData) ->
    id(decode_msg_loginReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit(loginResp, Bin, TrUserData) ->
    id(decode_msg_loginResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit(helloReq, Bin, TrUserData) ->
    id(decode_msg_helloReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit(worldResp, Bin, TrUserData) ->
    id(decode_msg_worldResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit(heartbeatReq, Bin, TrUserData) ->
    id(decode_msg_heartbeatReq(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(heartbeatResp, Bin, TrUserData) ->
    id(decode_msg_heartbeatResp(Bin, TrUserData),
       TrUserData).



decode_msg_loginReq(Bin, TrUserData) ->
    dfp_read_field_def_loginReq(Bin, 0, 0,
				id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_loginReq(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_loginReq_cookie(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_loginReq(<<>>, 0, 0, F@_1, _) ->
    #loginReq{cookie = F@_1};
dfp_read_field_def_loginReq(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_loginReq(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_loginReq(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_loginReq(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_loginReq(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_loginReq_cookie(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_loginReq(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_loginReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_loginReq(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_loginReq(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_loginReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_loginReq(<<>>, 0, 0, F@_1, _) ->
    #loginReq{cookie = F@_1}.

d_field_loginReq_cookie(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_loginReq_cookie(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_loginReq_cookie(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_loginReq(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_loginReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_loginReq(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_loginReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_loginReq(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_loginReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_loginReq(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_loginReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_loginReq(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_loginReq(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_loginReq(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_loginReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_loginReq(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_loginReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_loginReq(Rest, Z1, Z2, F@_1,
				TrUserData).

decode_msg_loginResp(Bin, TrUserData) ->
    dfp_read_field_def_loginResp(Bin, 0, 0,
				 id('FAILED', TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_loginResp(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, TrUserData) ->
    d_field_loginResp_result(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_loginResp(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_loginResp_user_id(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_loginResp(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #loginResp{result = F@_1, user_id = F@_2};
dfp_read_field_def_loginResp(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_loginResp(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_loginResp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_loginResp(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_loginResp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_loginResp_result(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      16 ->
	  d_field_loginResp_user_id(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_loginResp(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_loginResp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_loginResp(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_loginResp(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_loginResp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_loginResp(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #loginResp{result = F@_1, user_id = F@_2}.

d_field_loginResp_result(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_loginResp_result(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_loginResp_result(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_LOGINMSG(begin
					       <<Res:32/signed-native>> = <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
					       id(Res, TrUserData)
					     end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_loginResp(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_loginResp_user_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_loginResp_user_id(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_loginResp_user_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_loginResp(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_loginResp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_loginResp(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_loginResp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_loginResp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_loginResp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_loginResp(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_loginResp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_loginResp(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_loginResp(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_loginResp(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_loginResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_loginResp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_loginResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_loginResp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_helloReq(Bin, TrUserData) ->
    dfp_read_field_def_helloReq(Bin, 0, 0,
				id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_helloReq(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_helloReq_msg(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_helloReq(<<>>, 0, 0, F@_1, _) ->
    #helloReq{msg = F@_1};
dfp_read_field_def_helloReq(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_helloReq(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_helloReq(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_helloReq(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_helloReq(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_helloReq_msg(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_helloReq(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_helloReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_helloReq(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_helloReq(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_helloReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_helloReq(<<>>, 0, 0, F@_1, _) ->
    #helloReq{msg = F@_1}.

d_field_helloReq_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, TrUserData)
    when N < 57 ->
    d_field_helloReq_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			 TrUserData);
d_field_helloReq_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_helloReq(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_helloReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_helloReq(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_helloReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_helloReq(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_helloReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_helloReq(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_helloReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_helloReq(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_helloReq(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_helloReq(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_helloReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_helloReq(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_helloReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_helloReq(Rest, Z1, Z2, F@_1,
				TrUserData).

decode_msg_worldResp(Bin, TrUserData) ->
    dfp_read_field_def_worldResp(Bin, 0, 0,
				 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_worldResp(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_worldResp_msg(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_worldResp(<<>>, 0, 0, F@_1, _) ->
    #worldResp{msg = F@_1};
dfp_read_field_def_worldResp(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_worldResp(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_worldResp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_worldResp(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_worldResp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_worldResp_msg(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_worldResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_worldResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_worldResp(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_worldResp(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_worldResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_worldResp(<<>>, 0, 0, F@_1, _) ->
    #worldResp{msg = F@_1}.

d_field_worldResp_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_worldResp_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_worldResp_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_worldResp(RestF, 0, 0, NewFValue,
				 TrUserData).

skip_varint_worldResp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_worldResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_worldResp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_worldResp(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_worldResp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_worldResp(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_worldResp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_worldResp(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_worldResp(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_worldResp(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_worldResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_worldResp(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_worldResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_worldResp(Rest, Z1, Z2, F@_1,
				 TrUserData).

decode_msg_heartbeatReq(Bin, TrUserData) ->
    dfp_read_field_def_heartbeatReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_heartbeatReq(<<>>, 0, 0, _) ->
    #heartbeatReq{};
dfp_read_field_def_heartbeatReq(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_heartbeatReq(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_heartbeatReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_heartbeatReq(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_heartbeatReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_heartbeatReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_heartbeatReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_heartbeatReq(Rest, 0, 0,
					     TrUserData);
      3 ->
	  skip_group_heartbeatReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_heartbeatReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_heartbeatReq(<<>>, 0, 0, _) ->
    #heartbeatReq{}.

skip_varint_heartbeatReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_heartbeatReq(Rest, Z1, Z2, TrUserData);
skip_varint_heartbeatReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_heartbeatReq(Rest, Z1, Z2,
				    TrUserData).

skip_length_delimited_heartbeatReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_heartbeatReq(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_heartbeatReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_heartbeatReq(Rest2, 0, 0,
				    TrUserData).

skip_group_heartbeatReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_heartbeatReq(Rest, 0, Z2,
				    TrUserData).

skip_32_heartbeatReq(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_heartbeatReq(Rest, Z1, Z2,
				    TrUserData).

skip_64_heartbeatReq(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_heartbeatReq(Rest, Z1, Z2,
				    TrUserData).

decode_msg_heartbeatResp(Bin, TrUserData) ->
    dfp_read_field_def_heartbeatResp(Bin, 0, 0,
				     id(0, TrUserData), TrUserData).

dfp_read_field_def_heartbeatResp(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_heartbeatResp_unixtime(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_heartbeatResp(<<>>, 0, 0, F@_1, _) ->
    #heartbeatResp{unixtime = F@_1};
dfp_read_field_def_heartbeatResp(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_heartbeatResp(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_heartbeatResp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_heartbeatResp(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_heartbeatResp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_heartbeatResp_unixtime(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_heartbeatResp(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_heartbeatResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_heartbeatResp(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_heartbeatResp(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_heartbeatResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_heartbeatResp(<<>>, 0, 0, F@_1, _) ->
    #heartbeatResp{unixtime = F@_1}.

d_field_heartbeatResp_unixtime(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_heartbeatResp_unixtime(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_heartbeatResp_unixtime(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_heartbeatResp(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_heartbeatResp(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_heartbeatResp(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_heartbeatResp(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_heartbeatResp(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_heartbeatResp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_heartbeatResp(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_heartbeatResp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_heartbeatResp(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_heartbeatResp(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_heartbeatResp(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_heartbeatResp(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_heartbeatResp(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_heartbeatResp(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_heartbeatResp(Rest, Z1, Z2, F@_1,
				     TrUserData).

d_enum_LOGINMSG(0) -> 'FAILED';
d_enum_LOGINMSG(1) -> 'SUCCEEDED';
d_enum_LOGINMSG(2) -> 'NOTFOUND';
d_enum_LOGINMSG(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      loginReq -> merge_msg_loginReq(Prev, New, TrUserData);
      loginResp -> merge_msg_loginResp(Prev, New, TrUserData);
      helloReq -> merge_msg_helloReq(Prev, New, TrUserData);
      worldResp -> merge_msg_worldResp(Prev, New, TrUserData);
      heartbeatReq ->
	  merge_msg_heartbeatReq(Prev, New, TrUserData);
      heartbeatResp ->
	  merge_msg_heartbeatResp(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_loginReq/3}).
merge_msg_loginReq(#loginReq{cookie = PFcookie},
		   #loginReq{cookie = NFcookie}, _) ->
    #loginReq{cookie =
		  if NFcookie =:= undefined -> PFcookie;
		     true -> NFcookie
		  end}.

-compile({nowarn_unused_function,merge_msg_loginResp/3}).
merge_msg_loginResp(#loginResp{result = PFresult,
			       user_id = PFuser_id},
		    #loginResp{result = NFresult, user_id = NFuser_id},
		    _) ->
    #loginResp{result =
		   if NFresult =:= undefined -> PFresult;
		      true -> NFresult
		   end,
	       user_id =
		   if NFuser_id =:= undefined -> PFuser_id;
		      true -> NFuser_id
		   end}.

-compile({nowarn_unused_function,merge_msg_helloReq/3}).
merge_msg_helloReq(#helloReq{msg = PFmsg},
		   #helloReq{msg = NFmsg}, _) ->
    #helloReq{msg =
		  if NFmsg =:= undefined -> PFmsg;
		     true -> NFmsg
		  end}.

-compile({nowarn_unused_function,merge_msg_worldResp/3}).
merge_msg_worldResp(#worldResp{msg = PFmsg},
		    #worldResp{msg = NFmsg}, _) ->
    #worldResp{msg =
		   if NFmsg =:= undefined -> PFmsg;
		      true -> NFmsg
		   end}.

-compile({nowarn_unused_function,merge_msg_heartbeatReq/3}).
merge_msg_heartbeatReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_heartbeatResp/3}).
merge_msg_heartbeatResp(#heartbeatResp{unixtime =
					   PFunixtime},
			#heartbeatResp{unixtime = NFunixtime}, _) ->
    #heartbeatResp{unixtime =
		       if NFunixtime =:= undefined -> PFunixtime;
			  true -> NFunixtime
		       end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      loginReq -> v_msg_loginReq(Msg, [MsgName], TrUserData);
      loginResp ->
	  v_msg_loginResp(Msg, [MsgName], TrUserData);
      helloReq -> v_msg_helloReq(Msg, [MsgName], TrUserData);
      worldResp ->
	  v_msg_worldResp(Msg, [MsgName], TrUserData);
      heartbeatReq ->
	  v_msg_heartbeatReq(Msg, [MsgName], TrUserData);
      heartbeatResp ->
	  v_msg_heartbeatResp(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_loginReq/3}).
-dialyzer({nowarn_function,v_msg_loginReq/3}).
v_msg_loginReq(#loginReq{cookie = F1}, Path,
	       TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [cookie | Path], TrUserData)
    end,
    ok;
v_msg_loginReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, loginReq}, X, Path).

-compile({nowarn_unused_function,v_msg_loginResp/3}).
-dialyzer({nowarn_function,v_msg_loginResp/3}).
v_msg_loginResp(#loginResp{result = F1, user_id = F2},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_LOGINMSG(F1, [result | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [user_id | Path], TrUserData)
    end,
    ok;
v_msg_loginResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, loginResp}, X, Path).

-compile({nowarn_unused_function,v_msg_helloReq/3}).
-dialyzer({nowarn_function,v_msg_helloReq/3}).
v_msg_helloReq(#helloReq{msg = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msg | Path], TrUserData)
    end,
    ok;
v_msg_helloReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, helloReq}, X, Path).

-compile({nowarn_unused_function,v_msg_worldResp/3}).
-dialyzer({nowarn_function,v_msg_worldResp/3}).
v_msg_worldResp(#worldResp{msg = F1}, Path,
		TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msg | Path], TrUserData)
    end,
    ok;
v_msg_worldResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, worldResp}, X, Path).

-compile({nowarn_unused_function,v_msg_heartbeatReq/3}).
-dialyzer({nowarn_function,v_msg_heartbeatReq/3}).
v_msg_heartbeatReq(#heartbeatReq{}, _Path, _) -> ok;
v_msg_heartbeatReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, heartbeatReq}, X, Path).

-compile({nowarn_unused_function,v_msg_heartbeatResp/3}).
-dialyzer({nowarn_function,v_msg_heartbeatResp/3}).
v_msg_heartbeatResp(#heartbeatResp{unixtime = F1}, Path,
		    TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [unixtime | Path], TrUserData)
    end,
    ok;
v_msg_heartbeatResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, heartbeatResp}, X, Path).

-compile({nowarn_unused_function,v_enum_LOGINMSG/3}).
-dialyzer({nowarn_function,v_enum_LOGINMSG/3}).
v_enum_LOGINMSG('FAILED', _Path, _TrUserData) -> ok;
v_enum_LOGINMSG('SUCCEEDED', _Path, _TrUserData) -> ok;
v_enum_LOGINMSG('NOTFOUND', _Path, _TrUserData) -> ok;
v_enum_LOGINMSG(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_LOGINMSG(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'LOGINMSG'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'LOGINMSG'},
      [{'FAILED', 0}, {'SUCCEEDED', 1}, {'NOTFOUND', 2}]},
     {{msg, loginReq},
      [#field{name = cookie, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, loginResp},
      [#field{name = result, fnum = 1, rnum = 2,
	      type = {enum, 'LOGINMSG'}, occurrence = optional,
	      opts = []},
       #field{name = user_id, fnum = 2, rnum = 3,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, helloReq},
      [#field{name = msg, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, worldResp},
      [#field{name = msg, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, heartbeatReq}, []},
     {{msg, heartbeatResp},
      [#field{name = unixtime, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []}]}].


get_msg_names() ->
    [loginReq, loginResp, helloReq, worldResp, heartbeatReq,
     heartbeatResp].


get_group_names() -> [].


get_msg_or_group_names() ->
    [loginReq, loginResp, helloReq, worldResp, heartbeatReq,
     heartbeatResp].


get_enum_names() -> ['LOGINMSG'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(loginReq) ->
    [#field{name = cookie, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(loginResp) ->
    [#field{name = result, fnum = 1, rnum = 2,
	    type = {enum, 'LOGINMSG'}, occurrence = optional,
	    opts = []},
     #field{name = user_id, fnum = 2, rnum = 3,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def(helloReq) ->
    [#field{name = msg, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(worldResp) ->
    [#field{name = msg, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(heartbeatReq) -> [];
find_msg_def(heartbeatResp) ->
    [#field{name = unixtime, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('LOGINMSG') ->
    [{'FAILED', 0}, {'SUCCEEDED', 1}, {'NOTFOUND', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('LOGINMSG', Value) ->
    enum_symbol_by_value_LOGINMSG(Value).


enum_value_by_symbol('LOGINMSG', Sym) ->
    enum_value_by_symbol_LOGINMSG(Sym).


enum_symbol_by_value_LOGINMSG(0) -> 'FAILED';
enum_symbol_by_value_LOGINMSG(1) -> 'SUCCEEDED';
enum_symbol_by_value_LOGINMSG(2) -> 'NOTFOUND'.


enum_value_by_symbol_LOGINMSG('FAILED') -> 0;
enum_value_by_symbol_LOGINMSG('SUCCEEDED') -> 1;
enum_value_by_symbol_LOGINMSG('NOTFOUND') -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"common.proto.loginReq">>) -> loginReq;
fqbin_to_msg_name(<<"common.proto.loginResp">>) -> loginResp;
fqbin_to_msg_name(<<"common.proto.helloReq">>) -> helloReq;
fqbin_to_msg_name(<<"common.proto.worldResp">>) -> worldResp;
fqbin_to_msg_name(<<"common.proto.heartbeatReq">>) -> heartbeatReq;
fqbin_to_msg_name(<<"common.proto.heartbeatResp">>) -> heartbeatResp;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(loginReq) -> <<"common.proto.loginReq">>;
msg_name_to_fqbin(loginResp) -> <<"common.proto.loginResp">>;
msg_name_to_fqbin(helloReq) -> <<"common.proto.helloReq">>;
msg_name_to_fqbin(worldResp) -> <<"common.proto.worldResp">>;
msg_name_to_fqbin(heartbeatReq) -> <<"common.proto.heartbeatReq">>;
msg_name_to_fqbin(heartbeatResp) -> <<"common.proto.heartbeatResp">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"common.proto.LOGINMSG">>) -> 'LOGINMSG';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('LOGINMSG') -> <<"common.proto.LOGINMSG">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'common.proto'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "common.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["common.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["common"].


get_msg_containment("common") ->
    [heartbeatReq, heartbeatResp, helloReq, loginReq,
     loginResp, worldResp];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("common") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("common") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("common") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("common") -> ['LOGINMSG'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"common.proto.worldResp">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.proto.loginResp">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.proto.heartbeatResp">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.proto.loginReq">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.proto.helloReq">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.proto.heartbeatReq">>) -> "common";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"common.proto.LOGINMSG">>) -> "common";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.10.5".

gpb_version_as_list() ->
    [4,10,5].
